var searchIndex={};
searchIndex["tower"] = {"doc":"`fn(Request) -> Future<Response>`","i":[[0,"error","tower::buffer","Error types",null,null],[3,"ServiceError","tower::buffer::error","An error produced by a `Service` wrapped by a `Buffer`",null,null],[3,"Closed","","An error when the buffer's worker closes unexpectedly.",null,null],[0,"future","tower::buffer","Future types",null,null],[3,"ResponseFuture","tower::buffer::future","Future eventually completed with the response to the…",null,null],[3,"BufferLayer","tower::buffer","Buffer requests with a bounded buffer",null,null],[3,"Buffer","","Adds a buffer in front of an inner service.",null,null],[8,"Discover","tower::discover","Provide a uniform set of services able to satisfy a request.",null,null],[16,"Key","","NewService key",0,null],[16,"Service","","The type of `Service` yielded by this `Discover`.",0,null],[16,"Error","","Error produced during discovery",0,null],[10,"poll_discover","","Yields the next discovery change set.",0,[[["self"],["context"],["pin"]],[["result",["change"]],["poll",["result"]]]]],[4,"Change","","A change in the service set",null,null],[13,"Insert","","A new service identified by key `K` was identified.",1,null],[13,"Remove","","The service identified by key `K` disappeared.",1,null],[3,"ServiceList","","Static service discovery based on a predetermined list of…",null,null],[3,"ServiceStream","","Dynamic service discovery based on a stream of service…",null,null],[0,"concurrency","tower::limit","Limit the max number of requests being concurrently…",null,null],[0,"future","tower::limit::concurrency","Future types",null,null],[3,"ResponseFuture","tower::limit::concurrency::future","Future for the `ConcurrencyLimit` service.",null,null],[3,"ConcurrencyLimitLayer","tower::limit::concurrency","Enforces a limit on the concurrent number of requests the…",null,null],[3,"ConcurrencyLimit","","Enforces a limit on the concurrent number of requests the…",null,null],[0,"rate","tower::limit","Limit the rate at which requests are processed.",null,null],[3,"RateLimitLayer","tower::limit::rate","Enforces a rate limit on the number of requests the…",null,null],[3,"Rate","","A rate of requests per time period.",null,null],[3,"RateLimit","","Enforces a rate limit on the number of requests the…",null,null],[0,"error","tower::load_shed","Error types",null,null],[3,"Overloaded","tower::load_shed::error","An error returned by `Overload` when the underlying…",null,null],[0,"future","tower::load_shed","Future types",null,null],[3,"ResponseFuture","tower::load_shed::future","Future for the `LoadShed` service.",null,null],[3,"LoadShed","tower::load_shed","A `Service` that sheds load when the inner service isn't…",null,null],[3,"LoadShedLayer","","A `tower-layer` to wrap services in `LoadShed` middleware.",null,null],[0,"budget","tower::retry","A retry \"budget\" for allowing only a certain amount of…",null,null],[3,"Budget","tower::retry::budget","Represents a \"budget\" for retrying requests.",null,null],[3,"Overdrawn","","Indicates that it is not currently allowed to \"withdraw\"…",null,null],[0,"future","tower::retry","Future types",null,null],[3,"ResponseFuture","tower::retry::future","The `Future` returned by a `Retry` service.",null,null],[3,"Retry","tower::retry","Configure retrying requests of \"failed\" responses.",null,null],[3,"RetryLayer","","Retry requests based on a policy",null,null],[8,"Policy","","A \"retry policy\" to classify if a request should be retried.",null,null],[16,"Future","","The `Future` type returned by `Policy::retry()`.",2,null],[10,"retry","","Check the policy if a certain request should be retried.",2,[[["result"],["res"],["req"],["self"],["e"]],["option"]]],[10,"clone_request","","Tries to clone a request before being passed to the inner…",2,[[["req"],["self"]],["option"]]],[0,"error","tower::timeout","Error types",null,null],[3,"Elapsed","tower::timeout::error","The timeout elapsed.",null,null],[0,"future","tower::timeout","Future types",null,null],[3,"ResponseFuture","tower::timeout::future","`Timeout` response future",null,null],[3,"Timeout","tower::timeout","Applies a timeout to requests.",null,null],[3,"TimeoutLayer","","Applies a timeout to requests via the supplied inner…",null,null],[8,"Layer","tower::layer","Decorates a `Service`, transforming either the request or…",null,null],[16,"Service","","The wrapped service",3,null],[10,"layer","","Wrap the given service with the middleware, returning a…",3,[[["s"],["self"]]]],[3,"Identity","","A no-op middleware.",null,null],[3,"Stack","","Two middlewares chained together.",null,null],[8,"ServiceExt","tower","An extension trait for `Service`s that provides a variety…",null,null],[11,"ready","","A future yielding the service when it is ready to accept a…",4,[[["self"]],["ready"]]],[11,"oneshot","","Consume this `Service`, calling with the providing request…",4,[[["request"]],["oneshot"]]],[11,"call_all","","Process all requests from the given `Stream`, and produce…",4,[[["s"]],["callall"]]],[8,"Service","","An asynchronous function from a `Request` to a `Response`.",null,null],[16,"Response","","Responses given by the service.",5,null],[16,"Error","","Errors produced by the service.",5,null],[16,"Future","","The future response value.",5,null],[10,"poll_ready","","Returns `Poll::Ready(Ok(()))` when the service is able to…",5,[[["self"],["context"]],[["result"],["poll",["result"]]]]],[10,"call","","Process the request and return the response asynchronously.",5,[[["self"],["request"]]]],[5,"service_fn","","Returns a new `ServiceFn` with the given closure.",null,[[["t"]],["servicefn"]]],[0,"builder","","Builder types to compose layers and services",null,null],[3,"ServiceBuilder","tower::builder","Declaratively construct Service values.",null,null],[11,"new","","Create a new `ServiceBuilder`.",6,[[],["self"]]],[11,"layer","","Add a new layer `T` into the `ServiceBuilder`.",6,[[["t"]],[["servicebuilder",["stack"]],["stack"]]]],[11,"buffer","","Buffer requests when when the next layer is out of capacity.",6,[[["usize"]],[["stack",["bufferlayer"]],["servicebuilder",["stack"]]]]],[11,"concurrency_limit","","Limit the max number of in-flight requests.",6,[[["usize"]],[["stack",["concurrencylimitlayer"]],["servicebuilder",["stack"]]]]],[11,"load_shed","","Drop requests when the next layer is unable to respond to…",6,[[],[["stack",["loadshedlayer"]],["servicebuilder",["stack"]]]]],[11,"rate_limit","","Limit requests to at most `num` per the given duration",6,[[["duration"],["u64"]],[["servicebuilder",["stack"]],["stack",["ratelimitlayer"]]]]],[11,"retry","","Retry failed requests.",6,[[["p"]],[["stack",["retrylayer"]],["servicebuilder",["stack"]]]]],[11,"timeout","","Fail requests that take longer than `timeout`.",6,[[["duration"]],[["servicebuilder",["stack"]],["stack",["timeoutlayer"]]]]],[11,"into_inner","","Obtains the underlying `Layer` implementation.",6,[[],["l"]]],[11,"service","","Wrap the service `S` with the layers.",6,[[["s"]]]],[0,"util","tower","Combinators for working with `Service`s",null,null],[3,"BoxService","tower::util","A boxed `Service + Send` trait object.",null,null],[3,"CallAll","","This is a `futures::Stream` of responses resulting from…",null,null],[3,"CallAllUnordered","","A stream of responses received from the inner service in…",null,null],[4,"Either","","Combine two different service types into a single type.",null,null],[13,"A","","One type of backing `Service`.",7,null],[13,"B","","The other type of backing `Service`.",7,null],[3,"Oneshot","","A `Future` consuming a `Service` and request, waiting…",null,null],[3,"Optional","","Optionally forwards requests to an inner service.",null,null],[3,"Ready","","Future yielding a `Service` once the service is ready to…",null,null],[8,"ServiceExt","","An extension trait for `Service`s that provides a variety…",null,null],[11,"ready","","A future yielding the service when it is ready to accept a…",4,[[["self"]],["ready"]]],[11,"oneshot","","Consume this `Service`, calling with the providing request…",4,[[["request"]],["oneshot"]]],[11,"call_all","","Process all requests from the given `Stream`, and produce…",4,[[["s"]],["callall"]]],[3,"UnsyncBoxService","","A boxed `Service` trait object.",null,null],[11,"from","tower::buffer::error","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"to_string","","",8,[[["self"]],["string"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"to_string","","",9,[[["self"]],["string"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"from","tower::buffer::future","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"try_poll","","",10,[[["f"],["context"],["pin"]],["poll"]]],[11,"from","tower::buffer","",11,[[["t"]],["t"]]],[11,"into","","",11,[[],["u"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,[[["self"],["t"]]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"from","tower::discover","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[],["u"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[],["u"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"from","tower::limit::concurrency::future","",15,[[["t"]],["t"]]],[11,"into","","",15,[[],["u"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"try_poll","","",15,[[["f"],["context"],["pin"]],["poll"]]],[11,"from","tower::limit::concurrency","",16,[[["t"]],["t"]]],[11,"into","","",16,[[],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,[[["self"],["t"]]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"try_into","","",16,[[],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"type_id","","",16,[[["self"]],["typeid"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,[[["self"],["t"]]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"try_into","","",17,[[],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"type_id","","",17,[[["self"]],["typeid"]]],[11,"from","tower::limit::rate","",18,[[["t"]],["t"]]],[11,"into","","",18,[[],["u"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"try_into","","",18,[[],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"type_id","","",18,[[["self"]],["typeid"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[],["u"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,[[["self"],["t"]]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"try_into","","",19,[[],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"type_id","","",19,[[["self"]],["typeid"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[],["u"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"try_into","","",20,[[],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"type_id","","",20,[[["self"]],["typeid"]]],[11,"from","tower::load_shed::error","",21,[[["t"]],["t"]]],[11,"into","","",21,[[],["u"]]],[11,"to_string","","",21,[[["self"]],["string"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"try_into","","",21,[[],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"type_id","","",21,[[["self"]],["typeid"]]],[11,"from","tower::load_shed::future","",22,[[["t"]],["t"]]],[11,"into","","",22,[[],["u"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"try_into","","",22,[[],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"type_id","","",22,[[["self"]],["typeid"]]],[11,"try_poll","","",22,[[["f"],["context"],["pin"]],["poll"]]],[11,"from","tower::load_shed","",23,[[["t"]],["t"]]],[11,"into","","",23,[[],["u"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,[[["self"],["t"]]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"try_into","","",23,[[],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"type_id","","",23,[[["self"]],["typeid"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"into","","",24,[[],["u"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,[[["self"],["t"]]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"try_into","","",24,[[],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"type_id","","",24,[[["self"]],["typeid"]]],[11,"from","tower::retry::budget","",25,[[["t"]],["t"]]],[11,"into","","",25,[[],["u"]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"try_into","","",25,[[],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"type_id","","",25,[[["self"]],["typeid"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"into","","",26,[[],["u"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"try_into","","",26,[[],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"type_id","","",26,[[["self"]],["typeid"]]],[11,"from","tower::retry::future","",27,[[["t"]],["t"]]],[11,"into","","",27,[[],["u"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"try_into","","",27,[[],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"type_id","","",27,[[["self"]],["typeid"]]],[11,"try_poll","","",27,[[["f"],["context"],["pin"]],["poll"]]],[11,"from","tower::retry","",28,[[["t"]],["t"]]],[11,"into","","",28,[[],["u"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,[[["self"],["t"]]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"try_into","","",28,[[],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"type_id","","",28,[[["self"]],["typeid"]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"into","","",29,[[],["u"]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"try_into","","",29,[[],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"type_id","","",29,[[["self"]],["typeid"]]],[11,"from","tower::timeout::error","",30,[[["t"]],["t"]]],[11,"into","","",30,[[],["u"]]],[11,"to_string","","",30,[[["self"]],["string"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"try_into","","",30,[[],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"type_id","","",30,[[["self"]],["typeid"]]],[11,"from","tower::timeout::future","",31,[[["t"]],["t"]]],[11,"into","","",31,[[],["u"]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"try_into","","",31,[[],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"type_id","","",31,[[["self"]],["typeid"]]],[11,"try_poll","","",31,[[["f"],["context"],["pin"]],["poll"]]],[11,"from","tower::timeout","",32,[[["t"]],["t"]]],[11,"into","","",32,[[],["u"]]],[11,"to_owned","","",32,[[["self"]],["t"]]],[11,"clone_into","","",32,[[["self"],["t"]]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"try_into","","",32,[[],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"type_id","","",32,[[["self"]],["typeid"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"into","","",33,[[],["u"]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"try_into","","",33,[[],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"type_id","","",33,[[["self"]],["typeid"]]],[11,"from","tower::layer","",34,[[["t"]],["t"]]],[11,"into","","",34,[[],["u"]]],[11,"to_owned","","",34,[[["self"]],["t"]]],[11,"clone_into","","",34,[[["self"],["t"]]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"try_into","","",34,[[],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"type_id","","",34,[[["self"]],["typeid"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"into","","",35,[[],["u"]]],[11,"to_owned","","",35,[[["self"]],["t"]]],[11,"clone_into","","",35,[[["self"],["t"]]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"try_into","","",35,[[],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"type_id","","",35,[[["self"]],["typeid"]]],[11,"from","tower::builder","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","tower::util","",36,[[["t"]],["t"]]],[11,"into","","",36,[[],["u"]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"try_into","","",36,[[],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"type_id","","",36,[[["self"]],["typeid"]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"into","","",37,[[],["u"]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"try_into","","",37,[[],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"type_id","","",37,[[["self"]],["typeid"]]],[11,"try_poll_next","","",37,[[["pin"],["s"],["context"]],[["poll",["option"]],["option",["result"]]]]],[11,"from","","",38,[[["t"]],["t"]]],[11,"into","","",38,[[],["u"]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"try_into","","",38,[[],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"type_id","","",38,[[["self"]],["typeid"]]],[11,"try_poll_next","","",38,[[["pin"],["s"],["context"]],[["poll",["option"]],["option",["result"]]]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,[[["self"],["t"]]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"try_poll","","",7,[[["f"],["context"],["pin"]],["poll"]]],[11,"from","","",39,[[["t"]],["t"]]],[11,"into","","",39,[[],["u"]]],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"try_into","","",39,[[],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"type_id","","",39,[[["self"]],["typeid"]]],[11,"try_poll","","",39,[[["f"],["context"],["pin"]],["poll"]]],[11,"from","","",40,[[["t"]],["t"]]],[11,"into","","",40,[[],["u"]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"try_into","","",40,[[],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"type_id","","",40,[[["self"]],["typeid"]]],[11,"from","","",41,[[["t"]],["t"]]],[11,"into","","",41,[[],["u"]]],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"try_into","","",41,[[],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"type_id","","",41,[[["self"]],["typeid"]]],[11,"try_poll","","",41,[[["f"],["context"],["pin"]],["poll"]]],[11,"from","","",42,[[["t"]],["t"]]],[11,"into","","",42,[[],["u"]]],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"try_into","","",42,[[],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"type_id","","",42,[[["self"]],["typeid"]]],[11,"fmt","tower::buffer::error","",8,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",9,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"source","","",8,[[["self"]],[["error"],["option",["error"]]]]],[11,"fmt","","",8,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",9,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","tower::buffer::future","",10,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","tower::buffer","",11,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",12,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"clone","","",12,[[["self"]],["buffer"]]],[11,"layer","","",11,[[["s"],["self"]]]],[11,"poll","tower::buffer::future","",10,[[["pin",["responsefuture"]],["context"],["responsefuture"]],["poll"]]],[11,"poll_ready","tower::buffer","",12,[[["self"],["context"]],[["poll",["result"]],["result"]]]],[11,"call","","",12,[[["self"],["request"]]]],[11,"fmt","tower::layer","",35,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",34,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"default","","",34,[[],["identity"]]],[11,"layer","","",34,[[["s"],["self"]]]],[11,"layer","","",35,[[["s"],["self"]]]],[11,"clone","","",34,[[["self"]],["identity"]]],[11,"clone","","",35,[[["self"]],["stack"]]],[11,"fmt","tower::discover","",14,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",1,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",13,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"poll_discover","","",14,[[["context"],["pin",["servicestream"]],["servicestream"]],[["result",["change"]],["poll",["result"]]]]],[11,"poll_discover","","",13,[[["pin",["servicelist"]],["servicelist"],["context"]],[["result",["change"]],["poll",["result"]]]]],[11,"fmt","tower::limit::concurrency::future","",15,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","tower::limit::rate","",20,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",18,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",19,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","tower::limit::concurrency","",17,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",16,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"clone","tower::limit::rate","",19,[[["self"]],["rate"]]],[11,"clone","tower::limit::concurrency","",16,[[["self"]],["concurrencylimitlayer"]]],[11,"clone","","",17,[[["self"]],["concurrencylimit"]]],[11,"drop","tower::limit::concurrency::future","",15,[[["self"]]]],[11,"layer","tower::limit::rate","",18,[[["s"],["self"]]]],[11,"layer","tower::limit::concurrency","",16,[[["s"],["self"]]]],[11,"poll","tower::limit::concurrency::future","",15,[[["responsefuture"],["context"],["pin",["responsefuture"]]],["poll"]]],[11,"poll_ready","tower::limit::concurrency","",17,[[["self"],["context"]],[["poll",["result"]],["result"]]]],[11,"call","","",17,[[["self"],["request"]]]],[11,"poll_ready","tower::limit::rate","",20,[[["self"],["context"]],[["poll",["result"]],["result"]]]],[11,"call","","",20,[[["self"],["request"]]]],[11,"fmt","tower::load_shed::error","",21,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","tower::load_shed","",23,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",24,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","tower::load_shed::error","",21,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","tower::load_shed::future","",22,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"clone","tower::load_shed","",23,[[["self"]],["loadshed"]]],[11,"clone","","",24,[[["self"]],["loadshedlayer"]]],[11,"poll","tower::load_shed::future","",22,[[["pin",["responsefuture"]],["responsefuture"],["context"]],["poll"]]],[11,"poll_ready","tower::load_shed","",23,[[["self"],["context"]],[["poll",["result"]],["result"]]]],[11,"call","","",23,[[["self"],["req"]]]],[11,"layer","","",24,[[["s"],["self"]]]],[11,"fmt","tower::retry","",29,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","tower::retry::budget","",26,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",25,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","tower::retry","",28,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","tower::retry::future","",27,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"default","tower::retry::budget","",25,[[],["budget"]]],[11,"clone","tower::retry","",28,[[["self"]],["retry"]]],[11,"poll","tower::retry::future","",27,[[["pin",["responsefuture"]],["responsefuture"],["context"]],["poll"]]],[11,"layer","tower::retry","",29,[[["s"],["self"]]]],[11,"poll_ready","","",28,[[["self"],["context"]],[["result"],["poll",["result"]]]]],[11,"call","","",28,[[["self"],["request"]]]],[11,"fmt","tower::timeout::error","",30,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","tower::timeout","",32,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","tower::timeout::future","",31,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","tower::timeout::error","",30,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","tower::timeout","",33,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"clone","","",32,[[["self"]],["timeout"]]],[11,"poll","tower::timeout::future","",31,[[["responsefuture"],["context"],["pin",["responsefuture"]]],["poll"]]],[11,"poll_ready","tower::timeout","",32,[[["self"],["context"]],[["poll",["result"]],["result"]]]],[11,"call","","",32,[[["self"],["request"]]]],[11,"layer","","",33,[[["s"],["self"]]]],[11,"fmt","tower::util","",38,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",42,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",39,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",7,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",37,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",40,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",41,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",36,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"poll_next","","",37,[[["pin",["callall"]],["callall"],["context"]],[["poll",["option"]],["option"]]]],[11,"poll_next","","",38,[[["context"],["callallunordered"],["pin",["callallunordered"]]],[["poll",["option"]],["option"]]]],[11,"clone","","",7,[[["self"]],["either"]]],[11,"poll_ready","","",42,[[["self"],["context"]],[["poll",["result"]],["result"]]]],[11,"call","","",42,[[["self"],["t"]],[["pin",["box"]],["box",["future"]]]]],[11,"poll_ready","","",40,[[["self"],["context"]],[["poll",["result"]],["result"]]]],[11,"call","","",40,[[["self"],["request"]]]],[11,"poll_ready","","",7,[[["self"],["context"]],[["poll",["result"]],["result"]]]],[11,"call","","",7,[[["self"],["request"]]]],[11,"poll_ready","","",36,[[["self"],["context"]],[["poll",["result"]],["result"]]]],[11,"call","","",36,[[["self"],["t"]],[["box",["future"]],["pin",["box"]]]]],[11,"poll","","",41,[[["context"],["pin",["ready"]],["ready"]],["poll"]]],[11,"poll","","",39,[[["oneshot"],["pin",["oneshot"]],["context"]],["poll"]]],[11,"poll","","",7,[[["either"],["context"],["pin",["either"]]],["poll"]]],[11,"clone","tower::builder","",6,[[["self"]],["servicebuilder"]]],[11,"fmt","","",6,[[["formatter"],["self"]],["result"]]],[11,"new","tower::buffer","Create a new `BufferLayer` with the provided `bound`.",11,[[["usize"]],["bufferlayer"]]],[11,"new","","Creates a new `Buffer` wrapping `service`.",12,[[["t"],["usize"]],["buffer"]]],[11,"pair","","Creates a new `Buffer` wrapping `service` but returns the…",12,[[["t"],["usize"]]]],[11,"new","tower::discover","",13,[[["t"]],["servicelist"]]],[11,"new","","",14,[[["s"]],["servicestream"]]],[11,"new","tower::limit::concurrency","Create a new concurrency limit layer.",16,[[["usize"]],["concurrencylimitlayer"]]],[11,"new","","Create a new concurrency limiter.",17,[[["t"],["usize"]],["concurrencylimit"]]],[11,"get_ref","","Get a reference to the inner service",17,[[["self"]],["t"]]],[11,"get_mut","","Get a mutable reference to the inner service",17,[[["self"]],["t"]]],[11,"into_inner","","Consume `self`, returning the inner service",17,[[],["t"]]],[11,"new","tower::limit::rate","Create new rate limit layer.",18,[[["u64"],["duration"]],["ratelimitlayer"]]],[11,"new","","Create a new rate.",19,[[["u64"],["duration"]],["rate"]]],[11,"new","","Create a new rate limiter",20,[[["t"],["rate"]],["ratelimit"]]],[11,"get_ref","","Get a reference to the inner service",20,[[["self"]],["t"]]],[11,"get_mut","","Get a mutable reference to the inner service",20,[[["self"]],["t"]]],[11,"into_inner","","Consume `self`, returning the inner service",20,[[],["t"]]],[11,"new","tower::load_shed","Wraps a service in `LoadShed` middleware.",23,[[["s"]],["loadshed"]]],[11,"new","","Creates a new layer.",24,[[],["loadshedlayer"]]],[11,"new","tower::retry::budget","Create a `Budget` that allows for a certain percent of the…",25,[[["f32"],["u32"],["duration"]],["budget"]]],[11,"deposit","","Store a \"deposit\" in the budget, which will be used to…",25,[[["self"]]]],[11,"withdraw","","Check whether there is enough \"balance\" in the budget to…",25,[[["self"]],[["result",["overdrawn"]],["overdrawn"]]]],[11,"new","tower::retry","Retry the inner service depending on this `Policy`.",28,[[["s"],["p"]],["retry"]]],[11,"new","","Create a new `RetryLayer` from a retry policy",29,[[["p"]],["retrylayer"]]],[11,"new","tower::timeout::error","Construct a new elapsed error",30,[[],["elapsed"]]],[11,"new","tower::timeout","Creates a new Timeout",32,[[["t"],["duration"]],["timeout"]]],[11,"new","","Create a timeout from a duration",33,[[["duration"]],["timeoutlayer"]]],[11,"new","tower::layer","Create a new `Identity` value",34,[[],["identity"]]],[11,"new","","Create a new `Stack`.",35,[[["inner"],["outer"]],["stack"]]],[11,"new","tower::util","",36,[[["s"]],["boxservice"]]],[11,"new","","Create new `CallAll` combinator.",37,[[["s"],["svc"]],["callall"]]],[11,"into_inner","","Extract the wrapped `Service`.",37,[[],["svc"]]],[11,"take_service","","Extract the wrapped `Service`.",37,[[["pin",["callall"]],["callall"]],["svc"]]],[11,"unordered","","Return responses as they are ready, regardless of the…",37,[[],["callallunordered"]]],[11,"new","","Create new `CallAllUnordered` combinator.",38,[[["s"],["svc"]],["callallunordered"]]],[11,"into_inner","","Extract the wrapped `Service`.",38,[[],["svc"]]],[11,"take_service","","Extract the wrapped `Service`.",38,[[["callallunordered"],["pin",["callallunordered"]]],["svc"]]],[11,"new","","",39,[[["s"],["req"]],["oneshot"]]],[11,"new","","Create a new `OptionService`",40,[[["option"]],["optional"]]],[11,"new","","",41,[[["t"]],["ready"]]],[11,"new","","",42,[[["s"]],["unsyncboxservice"]]]],"p":[[8,"Discover"],[4,"Change"],[8,"Policy"],[8,"Layer"],[8,"ServiceExt"],[8,"Service"],[3,"ServiceBuilder"],[4,"Either"],[3,"ServiceError"],[3,"Closed"],[3,"ResponseFuture"],[3,"BufferLayer"],[3,"Buffer"],[3,"ServiceList"],[3,"ServiceStream"],[3,"ResponseFuture"],[3,"ConcurrencyLimitLayer"],[3,"ConcurrencyLimit"],[3,"RateLimitLayer"],[3,"Rate"],[3,"RateLimit"],[3,"Overloaded"],[3,"ResponseFuture"],[3,"LoadShed"],[3,"LoadShedLayer"],[3,"Budget"],[3,"Overdrawn"],[3,"ResponseFuture"],[3,"Retry"],[3,"RetryLayer"],[3,"Elapsed"],[3,"ResponseFuture"],[3,"Timeout"],[3,"TimeoutLayer"],[3,"Identity"],[3,"Stack"],[3,"BoxService"],[3,"CallAll"],[3,"CallAllUnordered"],[3,"Oneshot"],[3,"Optional"],[3,"Ready"],[3,"UnsyncBoxService"]]};
searchIndex["tower_balance"] = {"doc":"Load balancing middlewares.","i":[[0,"error","tower_balance","Error types",null,null],[3,"Discover","tower_balance::error","An error returned when the balancer's endpoint discovery…",null,null],[0,"p2c","tower_balance","A Power-of-Two-Choices Load Balancer",null,null],[3,"BalanceLayer","tower_balance::p2c","Efficiently distributes requests across an arbitrary…",null,null],[3,"BalanceMake","","Makes `Balancer`s given an inner service that makes…",null,null],[3,"MakeFuture","","Makes a balancer instance.",null,null],[3,"Balance","","Distributes requests across inner services using the…",null,null],[11,"new","","Builds a balancer using the system entropy.",0,[[],["self"]]],[11,"from_rng","","Builds a balancer from the provided RNG.",0,[[["r"]],[["result",["error"]],["error"]]]],[11,"from_entropy","","Initializes a P2C load balancer from the OS's entropy…",1,[[["s"]],["self"]]],[11,"new","","Initializes a P2C load balancer from the provided…",2,[[["d"],["smallrng"]],["self"]]],[11,"from_entropy","","Initializes a P2C load balancer from the OS's entropy…",2,[[["d"]],["self"]]],[11,"len","","Returns the number of endpoints currently tracked by the…",2,[[["self"]],["usize"]]],[0,"pool","tower_balance","This module defines a load-balanced pool of services that…",null,null],[3,"PoolDiscoverer","tower_balance::pool","A wrapper around `MakeService` that discovers a new…",null,null],[3,"Builder","","A [builder] that lets you configure how a [`Pool`]…",null,null],[3,"Pool","","A dynamically sized, load-balanced pool of `Service`…",null,null],[11,"new","","Create a new builder with default values for all load…",3,[[],["self"]]],[11,"underutilized_below","","When the estimated load (see the module-level docs) drops…",3,[[["self"],["f64"]],["self"]]],[11,"loaded_above","","When the estimated load (see the module-level docs)…",3,[[["self"],["f64"]],["self"]]],[11,"initial","","The initial estimated load average.",3,[[["self"],["f64"]],["self"]]],[11,"urgency","","How aggressively the estimated load average is updated.",3,[[["self"],["f64"]],["self"]]],[11,"max_services","","The maximum number of backing `Service` instances to…",3,[[["option",["usize"]],["self"],["usize"]],["self"]]],[11,"build","","See [`Pool::new`].",3,[[["ms"],["self"],["target"]],["pool"]]],[11,"new","","Construct a new dynamically sized `Pool`.",4,[[["ms"],["target"]],["self"]]],[11,"from","tower_balance::error","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"to_string","","",5,[[["self"]],["string"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"vzip","","",5,[[],["v"]]],[11,"from","tower_balance::p2c","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"vzip","","",0,[[],["v"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"vzip","","",1,[[],["v"]]],[11,"poll_ready","","",1,[[["self"],["context"]],[["poll",["result"]],["result"]]]],[11,"make_service","","",1,[[["self"],["target"]]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"vzip","","",6,[[],["v"]]],[11,"try_poll","","",6,[[["f"],["context"],["pin"]],["poll"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"vzip","","",2,[[],["v"]]],[11,"poll_ready","","",2,[[["self"],["context"]],[["poll",["result"]],["result"]]]],[11,"make_service","","",2,[[["self"],["target"]]]],[11,"from","tower_balance::pool","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"vzip","","",7,[[],["v"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"vzip","","",3,[[],["v"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"vzip","","",4,[[],["v"]]],[11,"poll_ready","","",4,[[["self"],["context"]],[["poll",["result"]],["result"]]]],[11,"make_service","","",4,[[["self"],["target"]]]],[11,"clone","tower_balance::p2c","",0,[[["self"]],["balancelayer"]]],[11,"clone","","",1,[[["self"]],["balancemake"]]],[11,"clone","tower_balance::pool","",3,[[["self"]],["builder"]]],[11,"default","","",3,[[],["self"]]],[11,"fmt","tower_balance::error","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_balance::p2c","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","tower_balance::pool","",7,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","tower_balance::error","",5,[[["formatter"],["self"]],["result"]]],[11,"source","","",5,[[["self"]],[["option",["error"]],["error"]]]],[11,"poll","tower_balance::p2c","",6,[[["context"],["self"],["pin"]],["poll"]]],[11,"layer","","",0,[[["s"],["self"]]]],[11,"drop","","",6,[[["self"],["pin"]]]],[11,"drop","tower_balance::pool","",7,[[["self"],["pin"]]]],[11,"poll_discover","","",7,[[["context"],["self"],["pin"]],[["poll",["result"]],["result",["change"]]]]],[11,"poll_ready","tower_balance::p2c","",1,[[["context"],["self"]],[["poll",["result"]],["result"]]]],[11,"call","","",1,[[["self"],["target"]]]],[11,"poll_ready","","",2,[[["context"],["self"]],[["poll",["result"]],["result"]]]],[11,"call","","",2,[[["self"],["req"]]]],[11,"poll_ready","tower_balance::pool","",4,[[["context"],["self"]],[["poll",["result"]],["result"]]]],[11,"call","","",4,[[["self"],["req"]]]]],"p":[[3,"BalanceLayer"],[3,"BalanceMake"],[3,"Balance"],[3,"Builder"],[3,"Pool"],[3,"Discover"],[3,"MakeFuture"],[3,"PoolDiscoverer"]]};
searchIndex["tower_buffer"] = {"doc":"Buffer requests when the inner service is out of capacity.","i":[[3,"BufferLayer","tower_buffer","Buffer requests with a bounded buffer",null,null],[3,"Buffer","","Adds a buffer in front of an inner service.",null,null],[0,"error","","Error types",null,null],[3,"ServiceError","tower_buffer::error","An error produced by a `Service` wrapped by a `Buffer`",null,null],[3,"Closed","","An error when the buffer's worker closes unexpectedly.",null,null],[0,"future","tower_buffer","Future types",null,null],[3,"ResponseFuture","tower_buffer::future","Future eventually completed with the response to the…",null,null],[11,"new","tower_buffer","Create a new `BufferLayer` with the provided `bound`.",0,[[["usize"]],["self"]]],[11,"new","","Creates a new `Buffer` wrapping `service`.",1,[[["t"],["usize"]],["self"]]],[11,"pair","","Creates a new `Buffer` wrapping `service` but returns the…",1,[[["t"],["usize"]]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","tower_buffer::error","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","tower_buffer::future","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"try_poll","","",4,[[["f"],["context"],["pin"]],["poll"]]],[11,"clone","tower_buffer","",1,[[["self"]],["self"]]],[11,"fmt","tower_buffer::error","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_buffer::future","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_buffer","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_buffer::error","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"source","","",2,[[["self"]],[["option",["error"]],["error"]]]],[11,"poll","tower_buffer::future","",4,[[["context"],["self"],["pin"]],["poll"]]],[11,"drop","","",4,[[["self"],["pin"]]]],[11,"layer","tower_buffer","",0,[[["s"],["self"]]]],[11,"poll_ready","","",1,[[["context"],["self"]],[["poll",["result"]],["result"]]]],[11,"call","","",1,[[["self"],["request"]]]]],"p":[[3,"BufferLayer"],[3,"Buffer"],[3,"ServiceError"],[3,"Closed"],[3,"ResponseFuture"]]};
searchIndex["tower_discover"] = {"doc":"Tower service discovery","i":[[3,"ServiceList","tower_discover","Static service discovery based on a predetermined list of…",null,null],[3,"ServiceStream","","Dynamic service discovery based on a stream of service…",null,null],[4,"Change","","A change in the service set",null,null],[13,"Insert","","A new service identified by key `K` was identified.",0,null],[13,"Remove","","The service identified by key `K` disappeared.",0,null],[11,"new","","",1,[[["t"]],["servicelist"]]],[11,"new","","",2,[[["s"]],["self"]]],[8,"Discover","","Provide a uniform set of services able to satisfy a request.",null,null],[16,"Key","","NewService key",3,null],[16,"Service","","The type of `Service` yielded by this `Discover`.",3,null],[16,"Error","","Error produced during discovery",3,null],[10,"poll_discover","","Yields the next discovery change set.",3,[[["context"],["self"],["pin"]],[["poll",["result"]],["result",["change"]]]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"poll_discover","","",1,[[["context"],["self"],["pin"]],[["poll",["result"]],["result",["change"]]]]],[11,"poll_discover","","",2,[[["context"],["self"],["pin"]],[["poll",["result"]],["result",["change"]]]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"drop","","",1,[[["self"],["pin"]]]],[11,"drop","","",2,[[["self"],["pin"]]]]],"p":[[4,"Change"],[3,"ServiceList"],[3,"ServiceStream"],[8,"Discover"]]};
searchIndex["tower_filter"] = {"doc":"Conditionally dispatch requests to the inner service based…","i":[[3,"FilterLayer","tower_filter","Conditionally dispatch requests to the inner service based…",null,null],[3,"Filter","","Conditionally dispatch requests to the inner service based…",null,null],[0,"error","","Error types",null,null],[3,"Error","tower_filter::error","Error produced by `Filter`",null,null],[11,"rejected","","Create a new `Error` representing a rejected request.",0,[[],["error"]]],[11,"inner","","Create a new `Error` representing an inner service error.",0,[[["e"]],["error"]]],[0,"future","tower_filter","Future types",null,null],[3,"ResponseFuture","tower_filter::future","Filtered response future",null,null],[11,"new","tower_filter","",1,[[["u"]],["self"]]],[8,"Predicate","","Checks a request",null,null],[16,"Future","","The future returned by `check`.",2,null],[10,"check","","Check whether the given request should be forwarded.",2,[[["request"],["self"]]]],[11,"new","","",3,[[["u"],["t"]],["self"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","tower_filter::error","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","tower_filter::future","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"try_poll","","",4,[[["f"],["context"],["pin"]],["poll"]]],[11,"clone","tower_filter","",3,[[["self"]],["filter"]]],[11,"fmt","tower_filter::error","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_filter::future","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_filter","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_filter::error","",0,[[["formatter"],["self"]],["result"]]],[11,"source","","",0,[[["self"]],[["option",["error"]],["error"]]]],[11,"poll","tower_filter::future","",4,[[["context"],["self"],["pin"]],["poll"]]],[11,"drop","","",4,[[["self"],["pin"]]]],[11,"poll_ready","tower_filter","",3,[[["context"],["self"]],[["result"],["poll",["result"]]]]],[11,"call","","",3,[[["self"],["request"]]]],[11,"layer","","",1,[[["s"],["self"]]]]],"p":[[3,"Error"],[3,"FilterLayer"],[8,"Predicate"],[3,"Filter"],[3,"ResponseFuture"]]};
searchIndex["tower_hedge"] = {"doc":"Pre-emptively retry requests which have been outstanding…","i":[[3,"Hedge","tower_hedge","A middleware that pre-emptively retries requests which…",null,null],[3,"Future","","The Future returned by the hedge Service.",null,null],[8,"Policy","","A policy which describes which requests can be cloned and…",null,null],[10,"clone_request","","clone_request is called when the request is first received…",0,[[["request"],["self"]],["option"]]],[10,"can_retry","","can_retry is called after the hedge timeout to determine…",0,[[["request"],["self"]],["bool"]]],[11,"new","","Create a new hedge middleware.",1,[[["f32"],["p"],["s"],["u64"],["duration"]],["hedge"]]],[11,"new_with_mock_latencies","","A hedge middleware with a prepopulated latency histogram.…",1,[[["f32"],["p"],["s"],["u64"],["duration"]],["hedge"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"try_poll","","",2,[[["f"],["context"],["pin"]],["poll"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"poll","","",2,[[["context"],["self"],["pin"]],["poll"]]],[11,"drop","","",2,[[["self"],["pin"]]]],[11,"poll_ready","","",1,[[["context"],["self"]],[["poll",["result"]],["result"]]]],[11,"call","","",1,[[["self"],["request"]]]]],"p":[[8,"Policy"],[3,"Hedge"],[3,"Future"]]};
searchIndex["tower_layer"] = {"doc":"Layer traits and extensions.","i":[[3,"Identity","tower_layer","A no-op middleware.",null,null],[3,"Stack","","Two middlewares chained together.",null,null],[11,"new","","Create a new `Identity` value",0,[[],["identity"]]],[11,"new","","Create a new `Stack`.",1,[[["inner"],["outer"]],["self"]]],[8,"Layer","","Decorates a `Service`, transforming either the request or…",null,null],[16,"Service","","The wrapped service",2,null],[10,"layer","","Wrap the given service with the middleware, returning a…",2,[[["s"],["self"]]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"layer","","",0,[[["s"],["self"]]]],[11,"layer","","",1,[[["s"],["self"]]]],[11,"clone","","",0,[[["self"]],["identity"]]],[11,"clone","","",1,[[["self"]],["stack"]]],[11,"default","","",0,[[],["identity"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]]],"p":[[3,"Identity"],[3,"Stack"],[8,"Layer"]]};
searchIndex["tower_limit"] = {"doc":"Tower middleware for limiting requests.","i":[[3,"ConcurrencyLimit","tower_limit","Enforces a limit on the concurrent number of requests the…",null,null],[3,"ConcurrencyLimitLayer","","Enforces a limit on the concurrent number of requests the…",null,null],[3,"RateLimit","","Enforces a rate limit on the number of requests the…",null,null],[3,"RateLimitLayer","","Enforces a rate limit on the number of requests the…",null,null],[0,"concurrency","","Limit the max number of requests being concurrently…",null,null],[3,"ConcurrencyLimitLayer","tower_limit::concurrency","Enforces a limit on the concurrent number of requests the…",null,null],[3,"ConcurrencyLimit","","Enforces a limit on the concurrent number of requests the…",null,null],[0,"future","","Future types",null,null],[3,"ResponseFuture","tower_limit::concurrency::future","Future for the `ConcurrencyLimit` service.",null,null],[11,"new","tower_limit","Create a new concurrency limit layer.",0,[[["usize"]],["self"]]],[11,"new","","Create a new concurrency limiter.",1,[[["t"],["usize"]],["self"]]],[11,"get_ref","","Get a reference to the inner service",1,[[["self"]],["t"]]],[11,"get_mut","","Get a mutable reference to the inner service",1,[[["self"]],["t"]]],[11,"into_inner","","Consume `self`, returning the inner service",1,[[],["t"]]],[0,"rate","","Limit the rate at which requests are processed.",null,null],[3,"RateLimitLayer","tower_limit::rate","Enforces a rate limit on the number of requests the…",null,null],[3,"Rate","","A rate of requests per time period.",null,null],[3,"RateLimit","","Enforces a rate limit on the number of requests the…",null,null],[11,"new","tower_limit","Create new rate limit layer.",2,[[["duration"],["u64"]],["self"]]],[11,"new","tower_limit::rate","Create a new rate.",3,[[["duration"],["u64"]],["self"]]],[11,"new","tower_limit","Create a new rate limiter",4,[[["t"],["rate"]],["self"]]],[11,"get_ref","","Get a reference to the inner service",4,[[["self"]],["t"]]],[11,"get_mut","","Get a mutable reference to the inner service",4,[[["self"]],["t"]]],[11,"into_inner","","Consume `self`, returning the inner service",4,[[],["t"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","tower_limit::concurrency::future","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"try_poll","","",5,[[["f"],["context"],["pin"]],["poll"]]],[11,"from","tower_limit::rate","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"drop","tower_limit::concurrency::future","",5,[[["self"]]]],[11,"clone","tower_limit","",0,[[["self"]],["concurrencylimitlayer"]]],[11,"clone","","",1,[[["self"]],["concurrencylimit"]]],[11,"clone","tower_limit::rate","",3,[[["self"]],["rate"]]],[11,"fmt","tower_limit::concurrency::future","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_limit","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_limit::rate","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_limit","",4,[[["self"],["formatter"]],["result"]]],[11,"poll","tower_limit::concurrency::future","",5,[[["context"],["self"],["pin"]],["poll"]]],[11,"drop","","",5,[[["self"],["pin"]]]],[11,"layer","tower_limit","",0,[[["s"],["self"]]]],[11,"layer","","",2,[[["s"],["self"]]]],[11,"poll_ready","","",1,[[["context"],["self"]],[["poll",["result"]],["result"]]]],[11,"call","","",1,[[["self"],["request"]]]],[11,"poll_ready","","",4,[[["context"],["self"]],[["poll",["result"]],["result"]]]],[11,"call","","",4,[[["self"],["request"]]]]],"p":[[3,"ConcurrencyLimitLayer"],[3,"ConcurrencyLimit"],[3,"RateLimitLayer"],[3,"Rate"],[3,"RateLimit"],[3,"ResponseFuture"]]};
searchIndex["tower_load"] = {"doc":"Abstractions and utilties for measuring a service's load.","i":[[3,"Constant","tower_load","Wraps a type so that `Load::load` returns a constant value.",null,null],[3,"InstrumentFuture","","Attaches a `I`-typed instruments to the result of an…",null,null],[3,"NoInstrument","","A `Instrument` implementation that drops each instrument…",null,null],[11,"new","","Wraps a `T`-typed service with a constant `M`-typed load…",0,[[["m"],["t"]],["self"]]],[11,"new","","Wraps a future, instrumenting its value if successful.",1,[[["i"],["f"],["h"]],["self"]]],[0,"peak_ewma","","A `Load` implementation that PeakEWMA on response latency.",null,null],[3,"PeakEwma","tower_load::peak_ewma","Wraps an `S`-typed Service with Peak-EWMA load measurement.",null,null],[3,"PeakEwmaDiscover","","Wraps a `D`-typed stream of discovery updates with…",null,null],[3,"Cost","","Represents the relative cost of communicating with a…",null,null],[3,"Handle","","Tracks an in-flight request and updates the RTT-estimate…",null,null],[11,"new","","Wraps a `D`-typed `Discover` so that services have a…",2,[[["d"],["duration"],["i"]],["self"]]],[0,"pending_requests","tower_load","A `Load` implementation that uses the count of in-flight…",null,null],[3,"PendingRequests","tower_load::pending_requests","Expresses load based on the number of currently-pending…",null,null],[3,"PendingRequestsDiscover","","Wraps `inner`'s services with `PendingRequests`.",null,null],[3,"Count","","Represents the number of currently-pending requests to a…",null,null],[3,"Handle","","Tracks an in-flight request by reference count.",null,null],[11,"new","","Wraps a `Discover``, wrapping all of its services with…",3,[[["d"],["i"]],["self"]]],[8,"Instrument","tower_load","Attaches `I`-typed instruments to `V` typed values.",null,null],[16,"Output","","The instrumented value type.",4,null],[10,"instrument","","Attaches an `H`-typed handle to a `V`-typed value.",4,[[["v"],["self"],["h"]]]],[8,"Load","","Exposes a load metric.",null,null],[16,"Metric","","A comparable load metric. Lesser values are \"preferable\"…",5,null],[10,"load","","Obtains a service's load.",5,[[["self"]]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"try_poll","","",1,[[["f"],["context"],["pin"]],["poll"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","tower_load::peak_ewma","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,[[["self"],["t"]]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"from","tower_load::pending_requests","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,[[["self"],["t"]]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[],["u"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"instrument","tower_load","",6,[[["v"],["self"],["h"]],["v"]]],[11,"load","","",0,[[["self"]],["m"]]],[11,"load","tower_load::peak_ewma","",7,[[["self"]]]],[11,"load","tower_load::pending_requests","",10,[[["self"]],["count"]]],[11,"drop","tower_load::peak_ewma","",9,[[["self"]]]],[11,"clone","tower_load","",6,[[["self"]],["noinstrument"]]],[11,"clone","tower_load::peak_ewma","",8,[[["self"]],["cost"]]],[11,"clone","tower_load::pending_requests","",11,[[["self"]],["count"]]],[11,"default","","",11,[[],["count"]]],[11,"cmp","","",11,[[["count"],["self"]],["ordering"]]],[11,"eq","tower_load::peak_ewma","",8,[[["self"],["cost"]],["bool"]]],[11,"ne","","",8,[[["self"],["cost"]],["bool"]]],[11,"eq","tower_load::pending_requests","",11,[[["count"],["self"]],["bool"]]],[11,"ne","","",11,[[["count"],["self"]],["bool"]]],[11,"partial_cmp","tower_load::peak_ewma","",8,[[["self"],["cost"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",8,[[["self"],["cost"]],["bool"]]],[11,"le","","",8,[[["self"],["cost"]],["bool"]]],[11,"gt","","",8,[[["self"],["cost"]],["bool"]]],[11,"ge","","",8,[[["self"],["cost"]],["bool"]]],[11,"partial_cmp","tower_load::pending_requests","",11,[[["count"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",11,[[["count"],["self"]],["bool"]]],[11,"le","","",11,[[["count"],["self"]],["bool"]]],[11,"gt","","",11,[[["count"],["self"]],["bool"]]],[11,"ge","","",11,[[["count"],["self"]],["bool"]]],[11,"fmt","tower_load","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_load::peak_ewma","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_load::pending_requests","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"poll","tower_load","",1,[[["context"],["self"],["pin"]],["poll"]]],[11,"drop","","",0,[[["self"],["pin"]]]],[11,"drop","","",1,[[["self"],["pin"]]]],[11,"drop","tower_load::peak_ewma","",2,[[["self"],["pin"]]]],[11,"drop","tower_load::pending_requests","",3,[[["self"],["pin"]]]],[11,"poll_discover","tower_load","Yields the next discovery change set.",0,[[["context"],["self"],["pin"]],[["poll",["result"]],["result",["change"]]]]],[11,"poll_discover","tower_load::peak_ewma","",2,[[["context"],["self"],["pin"]],[["poll",["result"]],["result",["change"]]]]],[11,"poll_discover","tower_load::pending_requests","Yields the next discovery change set.",3,[[["context"],["self"],["pin"]],[["poll",["result"]],["result",["change"]]]]],[11,"poll_ready","tower_load","",0,[[["context"],["self"]],[["poll",["result"]],["result"]]]],[11,"call","","",0,[[["self"],["request"]]]],[11,"poll_ready","tower_load::peak_ewma","",7,[[["context"],["self"]],[["poll",["result"]],["result"]]]],[11,"call","","",7,[[["self"],["request"]]]],[11,"poll_ready","tower_load::pending_requests","",10,[[["context"],["self"]],[["poll",["result"]],["result"]]]],[11,"call","","",10,[[["self"],["request"]]]]],"p":[[3,"Constant"],[3,"InstrumentFuture"],[3,"PeakEwmaDiscover"],[3,"PendingRequestsDiscover"],[8,"Instrument"],[8,"Load"],[3,"NoInstrument"],[3,"PeakEwma"],[3,"Cost"],[3,"Handle"],[3,"PendingRequests"],[3,"Count"],[3,"Handle"]]};
searchIndex["tower_load_shed"] = {"doc":"Tower middleware for shedding load when inner services…","i":[[3,"LoadShedLayer","tower_load_shed","A `tower-layer` to wrap services in `LoadShed` middleware.",null,null],[3,"LoadShed","","A `Service` that sheds load when the inner service isn't…",null,null],[0,"error","","Error types",null,null],[3,"Overloaded","tower_load_shed::error","An error returned by `Overload` when the underlying…",null,null],[0,"future","tower_load_shed","Future types",null,null],[3,"ResponseFuture","tower_load_shed::future","Future for the `LoadShed` service.",null,null],[11,"new","tower_load_shed","Creates a new layer.",0,[[],["self"]]],[11,"new","","Wraps a service in `LoadShed` middleware.",1,[[["s"]],["self"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","tower_load_shed::error","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","tower_load_shed::future","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"try_poll","","",3,[[["f"],["context"],["pin"]],["poll"]]],[11,"clone","tower_load_shed","",0,[[["self"]],["loadshedlayer"]]],[11,"clone","","",1,[[["self"]],["self"]]],[11,"fmt","tower_load_shed::error","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","tower_load_shed::future","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","tower_load_shed","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_load_shed::error","",2,[[["formatter"],["self"]],["result"]]],[11,"poll","tower_load_shed::future","",3,[[["context"],["self"],["pin"]],["poll"]]],[11,"poll_ready","tower_load_shed","",1,[[["context"],["self"]],[["result"],["poll",["result"]]]]],[11,"call","","",1,[[["self"],["req"]]]],[11,"drop","tower_load_shed::future","",3,[[["self"],["pin"]]]],[11,"layer","tower_load_shed","",0,[[["s"],["self"]]]]],"p":[[3,"LoadShedLayer"],[3,"LoadShed"],[3,"Overloaded"],[3,"ResponseFuture"]]};
searchIndex["tower_make"] = {"doc":"Trait aliases for Services that produce specific types of…","i":[[8,"MakeService","tower_make","Creates new `Service` values.",null,null],[16,"Response","","Responses given by the service",0,null],[16,"Error","","Errors produced by the service",0,null],[16,"Service","","The `Service` value created by this factory",0,null],[16,"MakeError","","Errors produced while building a service.",0,null],[16,"Future","","The future of the `Service` instance.",0,null],[10,"poll_ready","","Returns `Ready` when the factory is able to create more…",0,[[["context"],["self"]],[["poll",["result"]],["result"]]]],[10,"make_service","","Create and return a new service value asynchronously.",0,[[["self"],["target"]]]]],"p":[[8,"MakeService"]]};
searchIndex["tower_ready_cache"] = {"doc":"A cache of services","i":[[0,"cache","tower_ready_cache","A cache of services.",null,null],[8,"Equivalent","tower_ready_cache::cache","Key equivalence trait.",null,null],[10,"equivalent","","Compare self to `key` and return `true` if they are equal.",0,[[["k"],["self"]],["bool"]]],[3,"ReadyCache","","Drives readiness over a set of services.",null,null],[11,"len","","Returns the total number of services in the cache.",1,[[["self"]],["usize"]]],[11,"ready_len","","Returns the number of services in the ready set.",1,[[["self"]],["usize"]]],[11,"pending_len","","Returns the number of services in the unready set.",1,[[["self"]],["usize"]]],[11,"pending_contains","","Returns true iff the given key is in the unready set.",1,[[["self"],["q"]],["bool"]]],[11,"get_ready","","Obtains a reference to a service in the ready set by key.",1,[[["self"],["q"]],["option"]]],[11,"get_ready_mut","","Obtains a mutable reference to a service in the ready set…",1,[[["self"],["q"]],["option"]]],[11,"get_ready_index","","Obtains a reference to a service in the ready set by index.",1,[[["self"],["usize"]],["option"]]],[11,"get_ready_index_mut","","Obtains a mutable reference to a service in the ready set…",1,[[["self"],["usize"]],["option"]]],[11,"evict","","Evicts an item from the cache.",1,[[["self"],["q"]],["bool"]]],[11,"push","","Pushes a new service onto the pending set.",1,[[["self"],["k"],["s"]]]],[11,"poll_pending","","Polls services pending readiness, adding ready services to…",1,[[["context"],["self"]],[["poll",["result"]],["result",["failed"]]]]],[11,"check_ready","","Checks whether the referenced endpoint is ready.",1,[[["context"],["self"],["q"]],[["result",["bool","failed"]],["failed"],["bool"]]]],[11,"check_ready_index","","Checks whether the referenced endpoint is ready.",1,[[["context"],["self"],["usize"]],[["result",["bool","failed"]],["failed"],["bool"]]]],[11,"call_ready","","Calls a ready service by key.",1,[[["req"],["self"],["q"]]]],[11,"call_ready_index","","Calls a ready service by index.",1,[[["self"],["usize"],["req"]]]],[0,"error","tower_ready_cache","Errors",null,null],[3,"Failed","tower_ready_cache::error","An error indicating that the service with a `K`-typed key…",null,null],[12,"0","","",2,null],[12,"1","","",2,null],[6,"Error","","A generic error type.",null,null],[11,"from","tower_ready_cache::cache","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","tower_ready_cache::error","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"default","tower_ready_cache::cache","",1,[[],["self"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_ready_cache::error","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"source","","",2,[[["self"]],[["option",["error"]],["error"]]]]],"p":[[8,"Equivalent"],[3,"ReadyCache"],[3,"Failed"]]};
searchIndex["tower_reconnect"] = {"doc":"","i":[[3,"Reconnect","tower_reconnect","Reconnect to failed services.",null,null],[0,"future","","",null,null],[3,"ResponseFuture","tower_reconnect::future","Future that resolves to the response or failure to connect.",null,null],[11,"new","tower_reconnect","Lazily connect and reconnect to a Service.",0,[[["m"],["target"]],["self"]]],[11,"with_connection","","Reconnect to a already connected Service.",0,[[["m"],["target"]],["self"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"poll_ready","","",0,[[["self"],["context"]],[["poll",["result"]],["result"]]]],[11,"make_service","","",0,[[["self"],["target"]]]],[11,"from","tower_reconnect::future","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_reconnect","",0,[[["formatter"],["self"]],["result"]]],[11,"poll","tower_reconnect::future","",1,[[["context"],["self"],["pin"]],["poll"]]],[11,"drop","","",1,[[["self"],["pin"]]]],[11,"poll_ready","tower_reconnect","",0,[[["context"],["self"]],[["result"],["poll",["result"]]]]],[11,"call","","",0,[[["self"],["request"]]]]],"p":[[3,"Reconnect"],[3,"ResponseFuture"]]};
searchIndex["tower_retry"] = {"doc":"Tower middleware for retrying \"failed\" requests.","i":[[3,"RetryLayer","tower_retry","Retry requests based on a policy",null,null],[3,"Retry","","Configure retrying requests of \"failed\" responses.",null,null],[0,"budget","","A retry \"budget\" for allowing only a certain amount of…",null,null],[3,"Budget","tower_retry::budget","Represents a \"budget\" for retrying requests.",null,null],[3,"Overdrawn","","Indicates that it is not currently allowed to \"withdraw\"…",null,null],[11,"new","","Create a `Budget` that allows for a certain percent of the…",0,[[["f32"],["duration"],["u32"]],["self"]]],[11,"deposit","","Store a \"deposit\" in the budget, which will be used to…",0,[[["self"]]]],[11,"withdraw","","Check whether there is enough \"balance\" in the budget to…",0,[[["self"]],[["overdrawn"],["result",["overdrawn"]]]]],[0,"future","tower_retry","Future types",null,null],[3,"ResponseFuture","tower_retry::future","The `Future` returned by a `Retry` service.",null,null],[11,"new","tower_retry","Create a new `RetryLayer` from a retry policy",1,[[["p"]],["self"]]],[8,"Policy","","A \"retry policy\" to classify if a request should be retried.",null,null],[16,"Future","","The `Future` type returned by `Policy::retry()`.",2,null],[10,"retry","","Check the policy if a certain request should be retried.",2,[[["result"],["res"],["req"],["self"],["e"]],["option"]]],[10,"clone_request","","Tries to clone a request before being passed to the inner…",2,[[["req"],["self"]],["option"]]],[11,"new","","Retry the inner service depending on this `Policy`.",3,[[["s"],["p"]],["self"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","tower_retry::budget","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","tower_retry::future","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"try_poll","","",5,[[["f"],["context"],["pin"]],["poll"]]],[11,"clone","tower_retry","",3,[[["self"]],["retry"]]],[11,"default","tower_retry::budget","",0,[[],["budget"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","tower_retry::future","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_retry","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"poll","tower_retry::future","",5,[[["context"],["self"],["pin"]],["poll"]]],[11,"drop","","",5,[[["self"],["pin"]]]],[11,"drop","tower_retry","",3,[[["self"],["pin"]]]],[11,"poll_ready","","",3,[[["context"],["self"]],[["poll",["result"]],["result"]]]],[11,"call","","",3,[[["self"],["request"]]]],[11,"layer","","",1,[[["s"],["self"]]]]],"p":[[3,"Budget"],[3,"RetryLayer"],[8,"Policy"],[3,"Retry"],[3,"Overdrawn"],[3,"ResponseFuture"]]};
searchIndex["tower_service"] = {"doc":"Definition of the core `Service` trait to Tower","i":[[8,"Service","tower_service","An asynchronous function from a `Request` to a `Response`.",null,null],[16,"Response","","Responses given by the service.",0,null],[16,"Error","","Errors produced by the service.",0,null],[16,"Future","","The future response value.",0,null],[10,"poll_ready","","Returns `Poll::Ready(Ok(()))` when the service is able to…",0,[[["context"],["self"]],[["poll",["result"]],["result"]]]],[10,"call","","Process the request and return the response asynchronously.",0,[[["self"],["request"]]]]],"p":[[8,"Service"]]};
searchIndex["tower_spawn_ready"] = {"doc":"When an underlying service is not ready, drive it to…","i":[[3,"SpawnReadyLayer","tower_spawn_ready","Spawns tasks to drive its inner service to readiness.",null,null],[3,"MakeFuture","","Builds a SpawnReady with the result of an inner Future.",null,null],[3,"MakeSpawnReady","","Builds SpawnReady instances with the result of an inner…",null,null],[3,"SpawnReady","","Spawns tasks to drive an inner service to readiness.",null,null],[0,"future","","Background readiness types",null,null],[3,"BackgroundReady","tower_spawn_ready::future","Drives a service to readiness.",null,null],[11,"new","tower_spawn_ready","Builds a SpawnReady layer with the default executor.",0,[[],["self"]]],[11,"new","","Creates a new `MakeSpawnReady` wrapping `service`.",1,[[["s"]],["self"]]],[11,"new","","Creates a new `SpawnReady` wrapping `service`.",2,[[["t"]],["self"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"try_poll","","",3,[[["f"],["context"],["pin"]],["poll"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","tower_spawn_ready::future","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"clone","tower_spawn_ready","",0,[[["self"]],["spawnreadylayer"]]],[11,"clone","","",1,[[["self"]],["makespawnready"]]],[11,"fmt","tower_spawn_ready::future","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_spawn_ready","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"poll","tower_spawn_ready::future","",4,[[["context"],["self"],["pin"]],["poll"]]],[11,"poll","tower_spawn_ready","",3,[[["context"],["self"],["pin"]],["poll"]]],[11,"drop","tower_spawn_ready::future","",4,[[["self"],["pin"]]]],[11,"drop","tower_spawn_ready","",3,[[["self"],["pin"]]]],[11,"poll_ready","","",1,[[["context"],["self"]],[["poll",["result"]],["result"]]]],[11,"call","","",1,[[["self"],["target"]]]],[11,"poll_ready","","",2,[[["context"],["self"]],[["poll",["result"]],["result"]]]],[11,"call","","",2,[[["self"],["request"]]]],[11,"layer","","",0,[[["s"],["self"]]]]],"p":[[3,"SpawnReadyLayer"],[3,"MakeSpawnReady"],[3,"SpawnReady"],[3,"MakeFuture"],[3,"BackgroundReady"]]};
searchIndex["tower_test"] = {"doc":"Mock `Service` that can be used in tests.","i":[[0,"mock","tower_test","Mock `Service` that can be used in tests.",null,null],[3,"Mock","tower_test::mock","A mock service",null,null],[3,"Handle","","Handle to the `Mock`.",null,null],[3,"SendResponse","","Send a response in reply to a received request.",null,null],[5,"spawn_layer","","Spawn a layer onto a mock service.",null,[[["l"]]]],[5,"spawn","","Spawn a Service onto a mock task.",null,[[]]],[5,"spawn_with","","Spawn a Service via the provided wrapper closure.",null,[[["f"]]]],[5,"pair","","Create a new `Mock` and `Handle` pair.",null,[[]]],[0,"error","","Error types",null,null],[3,"Closed","tower_test::mock::error","Error yielded when a mocked service does not yet accept…",null,null],[0,"future","tower_test::mock","Future types",null,null],[3,"ResponseFuture","tower_test::mock::future","Future of the `Mock` response.",null,null],[0,"spawn","tower_test::mock","Spawn mock services onto a mock task.",null,null],[3,"Spawn","tower_test::mock::spawn","Service spawned on a mock task",null,null],[11,"new","","Create a new spawn.",0,[[["t"]],["self"]]],[11,"is_woken","","Check if this service has been woken up.",0,[[["self"]],["bool"]]],[11,"waker_ref_count","","Get how many futurs are holding onto the waker.",0,[[["self"]],["usize"]]],[11,"poll_ready","","Poll this service ready.",0,[[["self"]],[["result"],["poll",["result"]]]]],[11,"call","","Call the inner Service.",0,[[["self"],["request"]]]],[11,"into_inner","","Get the inner service.",0,[[],["t"]]],[11,"get_ref","","Get a reference to the inner service.",0,[[["self"]],["t"]]],[11,"get_mut","","Get a mutable reference to the inner service.",0,[[["self"]],["t"]]],[11,"poll_request","tower_test::mock","Asynchronously gets the next request",1,[[["self"]],[["poll",["option"]],["option"]]]],[11,"next_request","","Gets the next request.",1,[[["self"]]]],[11,"allow","","Allow a certain number of requests",1,[[["self"],["u64"]]]],[11,"send_error","","Make the next poll_ method error with the given error.",1,[[["self"],["box",["error"]],["into",["box"]]]]],[11,"send_response","","Resolve the pending request future for the linked request…",2,[[["t"]]]],[11,"send_error","","Resolve the pending request future for the linked request…",2,[[["box",["error"]],["into",["box"]]]]],[14,"assert_request_eq","tower_test","Asserts that the mock handle receives a new request equal…",null,null],[11,"from","tower_test::mock","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","tower_test::mock::error","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_string","","",4,[[["self"]],["string"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","tower_test::mock::future","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"try_poll","","",5,[[["f"],["context"],["pin"]],["poll"]]],[11,"from","tower_test::mock::spawn","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"drop","tower_test::mock","",3,[[["self"]]]],[11,"drop","","",1,[[["self"]]]],[11,"clone","tower_test::mock::spawn","",0,[[["self"]],["self"]]],[11,"clone","tower_test::mock","",3,[[["self"]],["self"]]],[11,"fmt","tower_test::mock::error","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_test::mock::future","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_test::mock::spawn","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_test::mock","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_test::mock::error","",4,[[["formatter"],["self"]],["result"]]],[11,"poll","tower_test::mock::future","",5,[[["context"],["self"],["pin"]],["poll"]]],[11,"drop","","",5,[[["self"],["pin"]]]],[11,"poll_ready","tower_test::mock","",3,[[["context"],["self"]],[["poll",["result"]],["result"]]]],[11,"call","","",3,[[["self"],["t"]]]]],"p":[[3,"Spawn"],[3,"Handle"],[3,"SendResponse"],[3,"Mock"],[3,"Closed"],[3,"ResponseFuture"]]};
searchIndex["tower_timeout"] = {"doc":"Tower middleware that applies a timeout to requests.","i":[[3,"TimeoutLayer","tower_timeout","Applies a timeout to requests via the supplied inner…",null,null],[3,"Timeout","","Applies a timeout to requests.",null,null],[0,"error","","Error types",null,null],[3,"Elapsed","tower_timeout::error","The timeout elapsed.",null,null],[11,"new","","Construct a new elapsed error",0,[[],["self"]]],[0,"future","tower_timeout","Future types",null,null],[3,"ResponseFuture","tower_timeout::future","`Timeout` response future",null,null],[11,"new","tower_timeout","Create a timeout from a duration",1,[[["duration"]],["self"]]],[11,"new","","Creates a new Timeout",2,[[["duration"],["t"]],["self"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","tower_timeout::error","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","tower_timeout::future","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"try_poll","","",3,[[["f"],["context"],["pin"]],["poll"]]],[11,"clone","tower_timeout","",2,[[["self"]],["timeout"]]],[11,"fmt","tower_timeout::error","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_timeout::future","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_timeout","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_timeout::error","",0,[[["formatter"],["self"]],["result"]]],[11,"poll","tower_timeout::future","",3,[[["context"],["self"],["pin"]],["poll"]]],[11,"drop","","",3,[[["self"],["pin"]]]],[11,"layer","tower_timeout","",1,[[["s"],["self"]]]],[11,"poll_ready","","",2,[[["context"],["self"]],[["poll",["result"]],["result"]]]],[11,"call","","",2,[[["self"],["request"]]]]],"p":[[3,"Elapsed"],[3,"TimeoutLayer"],[3,"Timeout"],[3,"ResponseFuture"]]};
searchIndex["tower_util"] = {"doc":"Various utility types and functions that are generally…","i":[[3,"BoxService","tower_util","A boxed `Service + Send` trait object.",null,null],[3,"UnsyncBoxService","","A boxed `Service` trait object.",null,null],[3,"Oneshot","","A `Future` consuming a `Service` and request, waiting…",null,null],[3,"Optional","","Optionally forwards requests to an inner service.",null,null],[3,"Ready","","Future yielding a `Service` once the service is ready to…",null,null],[3,"ServiceFn","","A `Service` implemented by a closure.",null,null],[3,"CallAll","","This is a `futures::Stream` of responses resulting from…",null,null],[3,"CallAllUnordered","","A stream of responses received from the inner service in…",null,null],[4,"Either","","Combine two different service types into a single type.",null,null],[13,"A","","One type of backing `Service`.",0,null],[13,"B","","The other type of backing `Service`.",0,null],[5,"service_fn","","Returns a new `ServiceFn` with the given closure.",null,[[["t"]],["servicefn"]]],[11,"new","","",1,[[["s"]],["self"]]],[11,"new","","",2,[[["s"]],["self"]]],[11,"new","","Create new `CallAll` combinator.",3,[[["s"],["svc"]],["callall"]]],[11,"into_inner","","Extract the wrapped `Service`.",3,[[],["svc"]]],[11,"take_service","","Extract the wrapped `Service`.",3,[[["self"],["pin"]],["svc"]]],[11,"unordered","","Return responses as they are ready, regardless of the…",3,[[],["callallunordered"]]],[11,"new","","Create new `CallAllUnordered` combinator.",4,[[["s"],["svc"]],["callallunordered"]]],[11,"into_inner","","Extract the wrapped `Service`.",4,[[],["svc"]]],[11,"take_service","","Extract the wrapped `Service`.",4,[[["self"],["pin"]],["svc"]]],[11,"new","","",5,[[["s"],["req"]],["self"]]],[11,"new","","Create a new `OptionService`",6,[[["option"]],["optional"]]],[11,"new","","",7,[[["t"]],["self"]]],[0,"error","","Error types",null,null],[0,"optional","tower_util::error","Error types for `OptionalService`.",null,null],[3,"None","tower_util::error::optional","Error returned if the inner `Service` has not been set.",null,null],[0,"future","tower_util","Future types",null,null],[0,"optional","tower_util::future","Future types for `OptionalService`.",null,null],[3,"ResponseFuture","tower_util::future::optional","Response future returned by `Optional`.",null,null],[8,"ServiceExt","tower_util","An extension trait for `Service`s that provides a variety…",null,null],[11,"ready","","A future yielding the service when it is ready to accept a…",8,[[["self"]],["ready"]]],[11,"oneshot","","Consume this `Service`, calling with the providing request…",8,[[["request"]],["oneshot"]]],[11,"call_all","","Process all requests from the given `Stream`, and produce…",8,[[["s"]],["callall"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"try_poll","","",5,[[["f"],["context"],["pin"]],["poll"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"try_poll","","",7,[[["f"],["context"],["pin"]],["poll"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,[[["self"],["t"]]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"try_poll_next","","",3,[[["pin"],["s"],["context"]],[["poll",["option"]],["option",["result"]]]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"try_poll_next","","",4,[[["pin"],["s"],["context"]],[["poll",["option"]],["option",["result"]]]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"try_poll","","",0,[[["f"],["context"],["pin"]],["poll"]]],[11,"from","tower_util::error::optional","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"to_string","","",10,[[["self"]],["string"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"from","tower_util::future::optional","",11,[[["t"]],["t"]]],[11,"into","","",11,[[],["u"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"try_poll","","",11,[[["f"],["context"],["pin"]],["poll"]]],[11,"clone","tower_util","",0,[[["self"]],["either"]]],[11,"clone","","",9,[[["self"]],["servicefn"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_util::error::optional","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_util::future::optional","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_util","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_util::error::optional","",10,[[["formatter"],["self"]],["result"]]],[11,"poll","tower_util","",0,[[["context"],["self"],["pin"]],["poll"]]],[11,"poll","","",5,[[["context"],["self"],["pin"]],["poll"]]],[11,"poll","tower_util::future::optional","",11,[[["context"],["self"],["pin"]],["poll"]]],[11,"poll","tower_util","",7,[[["context"],["self"],["pin"]],["poll"]]],[11,"poll_ready","","",1,[[["context"],["self"]],[["poll",["result"]],["result"]]]],[11,"call","","",1,[[["self"],["t"]],[["pin",["box"]],["box",["future"]]]]],[11,"poll_ready","","",2,[[["context"],["self"]],[["poll",["result"]],["result"]]]],[11,"call","","",2,[[["self"],["t"]],[["box",["future"]],["pin",["box"]]]]],[11,"poll_ready","","",0,[[["context"],["self"]],[["result"],["poll",["result"]]]]],[11,"call","","",0,[[["self"],["request"]]]],[11,"poll_ready","","",6,[[["context"],["self"]],[["result"],["poll",["result"]]]]],[11,"call","","",6,[[["self"],["request"]]]],[11,"poll_ready","","",9,[[["context"],["self"]],[["poll",["result"]],["result"]]]],[11,"call","","",9,[[["self"],["request"]]]],[11,"poll_next","","",3,[[["context"],["self"],["pin"]],[["poll",["option"]],["option"]]]],[11,"poll_next","","",4,[[["context"],["self"],["pin"]],[["poll",["option"]],["option"]]]],[11,"drop","","",3,[[["self"],["pin"]]]],[11,"drop","","",4,[[["self"],["pin"]]]],[11,"drop","","",0,[[["self"],["pin"]]]],[11,"drop","","",5,[[["self"],["pin"]]]],[11,"drop","tower_util::future::optional","",11,[[["self"],["pin"]]]]],"p":[[4,"Either"],[3,"BoxService"],[3,"UnsyncBoxService"],[3,"CallAll"],[3,"CallAllUnordered"],[3,"Oneshot"],[3,"Optional"],[3,"Ready"],[8,"ServiceExt"],[3,"ServiceFn"],[3,"None"],[3,"ResponseFuture"]]};
addSearchOptions(searchIndex);initSearch(searchIndex);